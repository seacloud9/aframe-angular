"use strict";

window.app = angular.module('EEVO', []);
app.directive('ngAButton', function ($rootScope, Scene) {
  return {
    restrict: 'A',
    link: function (scope, element, attributes) {
      element.bind('click', function (e) {
        Scene.changeScene(attributes.ngAButton);
        $rootScope.$broadcast('new scene');
      });
    }
  };
});
app.directive('ngACamera', function () {
  return {
    restrict: 'A',
    link: function (scope, element, attributes) {
      // console.log(attributes);
    }
  };
});
app.directive('ngAImage', function () {
  return {
    restrict: 'E',
    scope: {
      img: '@img'
    },
    replace: true,
    templateUrl: 'app/js/aframe/ng-a-image.html',
    link: function (scope, element, attributes) {
      // console.log(attributes);
      // attributes.src = "public/images/tagline.png"
      // console.log(attributes);
    }
  };
});
app.controller('NgASceneController', function ($scope, Scene) {
  $scope.subview = Scene.getScene();
  $scope.$on('new scene', function () {
    $scope.subview = Scene.getScene();
    $scope.$apply();
  });
});
app.directive('ngAScene', function () {
  return {
    restrict: 'A',
    // controller: NgAFrameController,
    link: function (scope, element, attributes) {
      // console.log(scope);
    }
  };
});
app.directive('pillarsTemplate', function () {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'app/js/aframe/pillars.html'
  };
});
// app.factory("Scene", function(){
//   return {
//     "selected": "scene1"
//   }
// });

app.factory("Scene", function () {
  var scene = "scene1";
  return {
    getScene: function () {
      return scene;
    },
    changeScene: function (newScene) {
      scene = newScene;
      console.log('Changing Scene within Factory: ', this.getScene());
      return scene;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFmcmFtZS9uZy1hLWJ1dHRvbi5kaXJlY3RpdmUuanMiLCJhZnJhbWUvbmctYS1jYW1lcmEuZGlyZWN0aXZlLmpzIiwiYWZyYW1lL25nLWEtaW1hZ2UuZGlyZWN0aXZlLmpzIiwiYWZyYW1lL25nLWEtc2NlbmUuY29udHJvbGxlci5qcyIsImFmcmFtZS9uZy1hLXNjZW5lLmRpcmVjdGl2ZS5qcyIsImFmcmFtZS9waWxsYXJzLXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsImFmcmFtZS9zY2VuZS5mYWN0b3J5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsQ0FBQTs7QUFDQSxNQUFBLENBQUEsR0FBQSxHQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBO0FDREEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxXQUFBLEVBQUEsVUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBO0FBQ0EsU0FBQTtBQUNBLFlBQUEsRUFBQSxHQUFBO0FBQ0EsUUFBQSxFQUFBLFVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUE7QUFDQSxhQUFBLENBQUEsSUFBQSxDQUFBLE9BQUEsRUFBQSxVQUFBLENBQUEsRUFBQTtBQUNBLGFBQUEsQ0FBQSxXQUFBLENBQUEsVUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBO0FBQ0Esa0JBQUEsQ0FBQSxVQUFBLENBQUEsV0FBQSxDQUFBLENBQUE7T0FDQSxDQUFBLENBQUE7S0FDQTtHQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7QUNWQSxHQUFBLENBQUEsU0FBQSxDQUFBLFdBQUEsRUFBQSxZQUFBO0FBQ0EsU0FBQTtBQUNBLFlBQUEsRUFBQSxHQUFBO0FBQ0EsUUFBQSxFQUFBLFVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUE7O0tBRUE7R0FDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBO0FDUEEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxVQUFBLEVBQUEsWUFBQTtBQUNBLFNBQUE7QUFDQSxZQUFBLEVBQUEsR0FBQTtBQUNBLFNBQUEsRUFBQTtBQUNBLFNBQUEsRUFBQSxNQUFBO0tBQ0E7QUFDQSxXQUFBLEVBQUEsSUFBQTtBQUNBLGVBQUEsRUFBQSwrQkFBQTtBQUNBLFFBQUEsRUFBQSxVQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsVUFBQSxFQUFBOzs7O0tBSUE7R0FDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBO0FDZEEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxvQkFBQSxFQUFBLFVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQTtBQUNBLFFBQUEsQ0FBQSxPQUFBLEdBQUEsS0FBQSxDQUFBLFFBQUEsRUFBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLEdBQUEsQ0FBQSxXQUFBLEVBQUEsWUFBQTtBQUNBLFVBQUEsQ0FBQSxPQUFBLEdBQUEsS0FBQSxDQUFBLFFBQUEsRUFBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBO0dBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBO0FDTkEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxVQUFBLEVBQUEsWUFBQTtBQUNBLFNBQUE7QUFDQSxZQUFBLEVBQUEsR0FBQTs7QUFFQSxRQUFBLEVBQUEsVUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLFVBQUEsRUFBQTs7S0FFQTtHQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7QUNSQSxHQUFBLENBQUEsU0FBQSxDQUFBLGlCQUFBLEVBQUEsWUFBQTtBQUNBLFNBQUE7QUFDQSxZQUFBLEVBQUEsR0FBQTtBQUNBLFdBQUEsRUFBQSxJQUFBO0FBQ0EsZUFBQSxFQUFBLDRCQUFBO0dBQ0EsQ0FBQTtDQUNBLENBQUE7Ozs7Ozs7QUFBQSxBQ0NBLEdBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxFQUFBLFlBQUE7QUFDQSxNQUFBLEtBQUEsR0FBQSxRQUFBLENBQUE7QUFDQSxTQUFBO0FBQ0EsWUFBQSxFQUFBLFlBQUE7QUFDQSxhQUFBLEtBQUEsQ0FBQTtLQUNBO0FBQ0EsZUFBQSxFQUFBLFVBQUEsUUFBQSxFQUFBO0FBQ0EsV0FBQSxHQUFBLFFBQUEsQ0FBQTtBQUNBLGFBQUEsQ0FBQSxHQUFBLENBQUEsaUNBQUEsRUFBQSxJQUFBLENBQUEsUUFBQSxFQUFBLENBQUEsQ0FBQTtBQUNBLGFBQUEsS0FBQSxDQUFBO0tBQ0E7R0FDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbndpbmRvdy5hcHAgPSBhbmd1bGFyLm1vZHVsZSgnRUVWTycsIFtdKTsiLCJhcHAuZGlyZWN0aXZlKCduZ0FCdXR0b24nLCBmdW5jdGlvbigkcm9vdFNjb3BlLCBTY2VuZSl7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcyl7XG4gICAgICBlbGVtZW50LmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBTY2VuZS5jaGFuZ2VTY2VuZShhdHRyaWJ1dGVzLm5nQUJ1dHRvbik7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnbmV3IHNjZW5lJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pIiwiYXBwLmRpcmVjdGl2ZSgnbmdBQ2FtZXJhJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhhdHRyaWJ1dGVzKTtcbiAgICB9XG4gIH1cbn0pOyIsImFwcC5kaXJlY3RpdmUoJ25nQUltYWdlJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHNjb3BlOiB7XG4gICAgICBpbWc6ICdAaW1nJ1xuICAgIH0sXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogJ2FwcC9qcy9hZnJhbWUvbmctYS1pbWFnZS5odG1sJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykge1xuICAgICAgLy8gY29uc29sZS5sb2coYXR0cmlidXRlcyk7XG4gICAgICAvLyBhdHRyaWJ1dGVzLnNyYyA9IFwicHVibGljL2ltYWdlcy90YWdsaW5lLnBuZ1wiXG4gICAgICAvLyBjb25zb2xlLmxvZyhhdHRyaWJ1dGVzKTtcbiAgICB9XG4gIH1cbn0pOyIsImFwcC5jb250cm9sbGVyKCdOZ0FTY2VuZUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsIFNjZW5lKXtcbiAgJHNjb3BlLnN1YnZpZXcgPSBTY2VuZS5nZXRTY2VuZSgpO1xuICAkc2NvcGUuJG9uKCduZXcgc2NlbmUnLCBmdW5jdGlvbigpe1xuICAgICRzY29wZS5zdWJ2aWV3ID0gU2NlbmUuZ2V0U2NlbmUoKTtcbiAgICAkc2NvcGUuJGFwcGx5KCk7XG4gIH0pXG59KTsiLCJhcHAuZGlyZWN0aXZlKCduZ0FTY2VuZScsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAvLyBjb250cm9sbGVyOiBOZ0FGcmFtZUNvbnRyb2xsZXIsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKHNjb3BlKTtcbiAgICB9XG4gIH1cbn0pOyIsImFwcC5kaXJlY3RpdmUoJ3BpbGxhcnNUZW1wbGF0ZScsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiAnYXBwL2pzL2FmcmFtZS9waWxsYXJzLmh0bWwnXG4gIH1cbn0pIiwiLy8gYXBwLmZhY3RvcnkoXCJTY2VuZVwiLCBmdW5jdGlvbigpe1xuLy8gICByZXR1cm4ge1xuLy8gICAgIFwic2VsZWN0ZWRcIjogXCJzY2VuZTFcIlxuLy8gICB9XG4vLyB9KTtcblxuXG5hcHAuZmFjdG9yeShcIlNjZW5lXCIsIGZ1bmN0aW9uKCl7XG4gIHZhciBzY2VuZSA9IFwic2NlbmUxXCI7XG4gIHJldHVybiB7XG4gICAgICBnZXRTY2VuZTogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHNjZW5lO1xuICAgICAgfSxcbiAgICAgIGNoYW5nZVNjZW5lOiBmdW5jdGlvbihuZXdTY2VuZSl7XG4gICAgICAgIHNjZW5lID0gbmV3U2NlbmU7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDaGFuZ2luZyBTY2VuZSB3aXRoaW4gRmFjdG9yeTogJywgdGhpcy5nZXRTY2VuZSgpKTtcbiAgICAgICAgcmV0dXJuIHNjZW5lO1xuICAgICAgfVxuICB9XG59KSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
