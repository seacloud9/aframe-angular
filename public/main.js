"use strict";

window.app = angular.module('ngAFrame', []);
app.directive('ngAButton', function ($rootScope, Scene) {
  return {
    restrict: 'A',
    link: function (scope, element, attributes) {
      element.bind('click', function (e) {
        Scene.changeScene(attributes.ngAButton);
        $rootScope.$broadcast('new scene');
      });
    }
  };
});
app.directive('ngACamera', function () {
  return {
    restrict: 'A',
    link: function (scope, element, attributes) {
      // console.log(attributes);
    }
  };
});
app.directive('ngAImage', function () {
  return {
    restrict: 'E',
    scope: {
      img: '@img'
    },
    replace: true,
    templateUrl: 'app/js/aframe/ng-a-image.html',
    link: function (scope, element, attributes) {
      // console.log(attributes);
      // attributes.src = "public/images/tagline.png"
      // console.log(attributes);
    }
  };
});
app.controller('NgASceneController', function ($scope, Scene) {
  $scope.subview = Scene.getScene();
  $scope.$on('new scene', function () {
    $scope.subview = Scene.getScene();
    $scope.$apply();
  });
});
app.directive('ngAScene', function () {
  return {
    restrict: 'A',
    // controller: NgAFrameController,
    link: function (scope, element, attributes) {
      // console.log(scope);
    }
  };
});
app.directive('pillarsTemplate', function () {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: 'app/js/aframe/pillars.html'
  };
});
// app.factory("Scene", function(){
//   return {
//     "selected": "scene1"
//   }
// });

app.factory("Scene", function () {
  var scene = "scene1";
  return {
    getScene: function () {
      return scene;
    },
    changeScene: function (newScene) {
      scene = newScene;
      console.log('Changing Scene within Factory: ', this.getScene());
      return scene;
    }
  };
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFmcmFtZS9uZy1hLWJ1dHRvbi5kaXJlY3RpdmUuanMiLCJhZnJhbWUvbmctYS1jYW1lcmEuZGlyZWN0aXZlLmpzIiwiYWZyYW1lL25nLWEtaW1hZ2UuZGlyZWN0aXZlLmpzIiwiYWZyYW1lL25nLWEtc2NlbmUuY29udHJvbGxlci5qcyIsImFmcmFtZS9uZy1hLXNjZW5lLmRpcmVjdGl2ZS5qcyIsImFmcmFtZS9waWxsYXJzLXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsImFmcmFtZS9zY2VuZS5mYWN0b3J5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsQ0FBQTs7QUFDQSxNQUFBLENBQUEsR0FBQSxHQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsVUFBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBO0FDREEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxXQUFBLEVBQUEsVUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBO0FBQ0EsU0FBQTtBQUNBLFlBQUEsRUFBQSxHQUFBO0FBQ0EsUUFBQSxFQUFBLFVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUE7QUFDQSxhQUFBLENBQUEsSUFBQSxDQUFBLE9BQUEsRUFBQSxVQUFBLENBQUEsRUFBQTtBQUNBLGFBQUEsQ0FBQSxXQUFBLENBQUEsVUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBO0FBQ0Esa0JBQUEsQ0FBQSxVQUFBLENBQUEsV0FBQSxDQUFBLENBQUE7T0FDQSxDQUFBLENBQUE7S0FDQTtHQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7QUNWQSxHQUFBLENBQUEsU0FBQSxDQUFBLFdBQUEsRUFBQSxZQUFBO0FBQ0EsU0FBQTtBQUNBLFlBQUEsRUFBQSxHQUFBO0FBQ0EsUUFBQSxFQUFBLFVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUE7O0tBRUE7R0FDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBO0FDUEEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxVQUFBLEVBQUEsWUFBQTtBQUNBLFNBQUE7QUFDQSxZQUFBLEVBQUEsR0FBQTtBQUNBLFNBQUEsRUFBQTtBQUNBLFNBQUEsRUFBQSxNQUFBO0tBQ0E7QUFDQSxXQUFBLEVBQUEsSUFBQTtBQUNBLGVBQUEsRUFBQSwrQkFBQTtBQUNBLFFBQUEsRUFBQSxVQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsVUFBQSxFQUFBOzs7O0tBSUE7R0FDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBO0FDZEEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxvQkFBQSxFQUFBLFVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQTtBQUNBLFFBQUEsQ0FBQSxPQUFBLEdBQUEsS0FBQSxDQUFBLFFBQUEsRUFBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLEdBQUEsQ0FBQSxXQUFBLEVBQUEsWUFBQTtBQUNBLFVBQUEsQ0FBQSxPQUFBLEdBQUEsS0FBQSxDQUFBLFFBQUEsRUFBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBO0dBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBO0FDTkEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxVQUFBLEVBQUEsWUFBQTtBQUNBLFNBQUE7QUFDQSxZQUFBLEVBQUEsR0FBQTs7QUFFQSxRQUFBLEVBQUEsVUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLFVBQUEsRUFBQTs7S0FFQTtHQUNBLENBQUE7Q0FDQSxDQUFBLENBQUE7QUNSQSxHQUFBLENBQUEsU0FBQSxDQUFBLGlCQUFBLEVBQUEsWUFBQTtBQUNBLFNBQUE7QUFDQSxZQUFBLEVBQUEsR0FBQTtBQUNBLFdBQUEsRUFBQSxJQUFBO0FBQ0EsZUFBQSxFQUFBLDRCQUFBO0dBQ0EsQ0FBQTtDQUNBLENBQUE7Ozs7Ozs7QUFBQSxBQ0NBLEdBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxFQUFBLFlBQUE7QUFDQSxNQUFBLEtBQUEsR0FBQSxRQUFBLENBQUE7QUFDQSxTQUFBO0FBQ0EsWUFBQSxFQUFBLFlBQUE7QUFDQSxhQUFBLEtBQUEsQ0FBQTtLQUNBO0FBQ0EsZUFBQSxFQUFBLFVBQUEsUUFBQSxFQUFBO0FBQ0EsV0FBQSxHQUFBLFFBQUEsQ0FBQTtBQUNBLGFBQUEsQ0FBQSxHQUFBLENBQUEsaUNBQUEsRUFBQSxJQUFBLENBQUEsUUFBQSxFQUFBLENBQUEsQ0FBQTtBQUNBLGFBQUEsS0FBQSxDQUFBO0tBQ0E7R0FDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbndpbmRvdy5hcHAgPSBhbmd1bGFyLm1vZHVsZSgnbmdBRnJhbWUnLCBbXSk7IiwiYXBwLmRpcmVjdGl2ZSgnbmdBQnV0dG9uJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgU2NlbmUpe1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpe1xuICAgICAgZWxlbWVudC5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgU2NlbmUuY2hhbmdlU2NlbmUoYXR0cmlidXRlcy5uZ0FCdXR0b24pO1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ25ldyBzY2VuZScpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSIsImFwcC5kaXJlY3RpdmUoJ25nQUNhbWVyYScsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykge1xuICAgICAgLy8gY29uc29sZS5sb2coYXR0cmlidXRlcyk7XG4gICAgfVxuICB9XG59KTsiLCJhcHAuZGlyZWN0aXZlKCduZ0FJbWFnZScsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBzY29wZToge1xuICAgICAgaW1nOiAnQGltZydcbiAgICB9LFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6ICdhcHAvanMvYWZyYW1lL25nLWEtaW1hZ2UuaHRtbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGF0dHJpYnV0ZXMpO1xuICAgICAgLy8gYXR0cmlidXRlcy5zcmMgPSBcInB1YmxpYy9pbWFnZXMvdGFnbGluZS5wbmdcIlxuICAgICAgLy8gY29uc29sZS5sb2coYXR0cmlidXRlcyk7XG4gICAgfVxuICB9XG59KTsiLCJhcHAuY29udHJvbGxlcignTmdBU2NlbmVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCBTY2VuZSl7XG4gICRzY29wZS5zdWJ2aWV3ID0gU2NlbmUuZ2V0U2NlbmUoKTtcbiAgJHNjb3BlLiRvbignbmV3IHNjZW5lJywgZnVuY3Rpb24oKXtcbiAgICAkc2NvcGUuc3VidmlldyA9IFNjZW5lLmdldFNjZW5lKCk7XG4gICAgJHNjb3BlLiRhcHBseSgpO1xuICB9KVxufSk7IiwiYXBwLmRpcmVjdGl2ZSgnbmdBU2NlbmUnLCBmdW5jdGlvbigpe1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgLy8gY29udHJvbGxlcjogTmdBRnJhbWVDb250cm9sbGVyLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhzY29wZSk7XG4gICAgfVxuICB9XG59KTsiLCJhcHAuZGlyZWN0aXZlKCdwaWxsYXJzVGVtcGxhdGUnLCBmdW5jdGlvbigpe1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogJ2FwcC9qcy9hZnJhbWUvcGlsbGFycy5odG1sJ1xuICB9XG59KSIsIi8vIGFwcC5mYWN0b3J5KFwiU2NlbmVcIiwgZnVuY3Rpb24oKXtcbi8vICAgcmV0dXJuIHtcbi8vICAgICBcInNlbGVjdGVkXCI6IFwic2NlbmUxXCJcbi8vICAgfVxuLy8gfSk7XG5cblxuYXBwLmZhY3RvcnkoXCJTY2VuZVwiLCBmdW5jdGlvbigpe1xuICB2YXIgc2NlbmUgPSBcInNjZW5lMVwiO1xuICByZXR1cm4ge1xuICAgICAgZ2V0U2NlbmU6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBzY2VuZTtcbiAgICAgIH0sXG4gICAgICBjaGFuZ2VTY2VuZTogZnVuY3Rpb24obmV3U2NlbmUpe1xuICAgICAgICBzY2VuZSA9IG5ld1NjZW5lO1xuICAgICAgICBjb25zb2xlLmxvZygnQ2hhbmdpbmcgU2NlbmUgd2l0aGluIEZhY3Rvcnk6ICcsIHRoaXMuZ2V0U2NlbmUoKSk7XG4gICAgICAgIHJldHVybiBzY2VuZTtcbiAgICAgIH1cbiAgfVxufSkiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
